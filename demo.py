import streamlit as st
import os
import sys
import json
import tempfile
from pathlib import Path
import importlib.util


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –∏–∑ —Ñ–∞–π–ª–∞
def import_module_from_path(module_name, file_path):
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)
    return module


# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤
current_dir = Path(__file__).parent

# –ò–º–ø–æ—Ä—Ç DOCX –ø–∞—Ä—Å–µ—Ä–∞
docx_parser = import_module_from_path(
    "docx_parser",
    current_dir / "parse_docx.py"
)

# –ò–º–ø–æ—Ä—Ç PDF –ø–∞—Ä—Å–µ—Ä–∞
pdf_parser = import_module_from_path(
    "pdf_parser",
    current_dir / "parse_pdf.py"
)

# –ò–º–ø–æ—Ä—Ç Excel –ø–∞—Ä—Å–µ—Ä–∞
excel_parser = import_module_from_path(
    "excel_parser",
    current_dir / "parse_excel.py"
)


# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit
def main():
    st.set_page_config(page_title="–ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", layout="wide")
    st.title("üìÑ –ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (DOCX, Excel, PDF)")
    st.write("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    tab_dir, tab_file = st.tabs(["–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"])

    with tab_dir:
        st.subheader("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        with st.form("directory_processing"):
            directory_path = st.text_input("–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", "documents")
            process_docx = st.checkbox("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å DOCX", value=True)
            process_excel = st.checkbox("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Excel", value=True)
            process_pdf = st.checkbox("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å PDF", value=True)

            if st.form_submit_button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary"):
                run_directory_processing(directory_path, process_docx, process_excel, process_pdf)

        st.info("""
        **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
        1. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
        4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö –≤–Ω—É—Ç—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        """)

    with tab_file:
        st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        with st.form("file_processing"):
            file_type = st.radio("–¢–∏–ø —Ñ–∞–π–ª–∞:", ["DOCX", "PDF", "Excel"], index=0)
            uploaded_file = st.file_uploader(
                f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ {file_type} —Ñ–∞–π–ª",
                type=["docx"] if file_type == "DOCX" else ["pdf"] if file_type == "PDF" else ["xlsx", "xls"]
            )

            if st.form_submit_button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª", type="primary") and uploaded_file:
                run_single_file_processing(uploaded_file, file_type)

        st.info("""
        **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
        1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞
        2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª"
        4. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂—ë–Ω –Ω–∏–∂–µ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """)


def run_directory_processing(directory_path, process_docx, process_excel, process_pdf):
    dir_path = Path(directory_path)

    if not dir_path.is_dir():
        st.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    output_root = dir_path / "parsed_results"
    output_root.mkdir(parents=True, exist_ok=True)

    progress_bar = st.progress(0)
    status_text = st.empty()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ DOCX
    if process_docx:
        output_dir = output_root / "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ docx"
        output_dir.mkdir(exist_ok=True)

        with st.spinner("–ü–æ–∏—Å–∫ DOCX —Ñ–∞–π–ª–æ–≤..."):
            docx_files = list(dir_path.glob("**/*.docx"))

        if docx_files:
            status_text.text(f"–ù–∞–π–¥–µ–Ω–æ DOCX —Ñ–∞–π–ª–æ–≤: {len(docx_files)}")
            for i, docx_path in enumerate(docx_files):
                progress = (i + 1) / len(docx_files)
                progress_bar.progress(progress)

                with st.expander(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {docx_path.name}"):
                    try:
                        docx_parser.process_docx_file(docx_path, output_dir)
                        st.success(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                        st.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {output_dir / docx_path.stem}.json")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        else:
            st.info("DOCX —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel
    if process_excel:
        output_dir = output_root / "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ excel"
        output_dir.mkdir(exist_ok=True)

        with st.spinner("–ü–æ–∏—Å–∫ Excel —Ñ–∞–π–ª–æ–≤..."):
            excel_files = list(dir_path.glob("**/*.xlsx")) + list(dir_path.glob("**/*.xls"))

        if excel_files:
            status_text.text(f"–ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
            for i, excel_path in enumerate(excel_files):
                progress = (i + 1) / len(excel_files)
                progress_bar.progress(progress)

                with st.expander(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {excel_path.name}"):
                    try:
                        excel_parser.process_excel_file(excel_path, output_dir)
                        st.success("–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                        st.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {output_dir / excel_path.stem}.json")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        else:
            st.info("Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
    if process_pdf:
        output_dir = output_root / "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ pdf"
        output_dir.mkdir(exist_ok=True)

        with st.spinner("–ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤..."):
            pdf_files = list(dir_path.glob("**/*.pdf"))

        if pdf_files:
            status_text.text(f"–ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
            for i, pdf_path in enumerate(pdf_files):
                progress = (i + 1) / len(pdf_files)
                progress_bar.progress(progress)

                with st.expander(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_path.name}"):
                    try:
                        pdf_parser.process_pdf_file(pdf_path, output_dir)
                        st.success("–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                        st.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {output_dir / pdf_path.stem}.json")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        else:
            st.info("PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    progress_bar.empty()
    status_text.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    st.balloons()


def run_single_file_processing(uploaded_file, file_type):
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_dir = Path(temp_dir)
            file_path = temp_dir / uploaded_file.name

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getvalue())

            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if file_type == "DOCX":
                    result = docx_parser.extract_document_structure(file_path)
                    result_type = "DOCX"

                elif file_type == "PDF":
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    output_dir = temp_dir / "output"
                    output_dir.mkdir()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                    pdf_parser.process_pdf_file(file_path, output_dir)

                    # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result_path = output_dir / (file_path.stem + ".json")
                    with open(result_path, "r", encoding="utf-8") as f:
                        result = json.load(f)
                    result_type = "PDF"

                else:  # Excel
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    output_dir = temp_dir / "output"
                    output_dir.mkdir()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Excel
                    excel_parser.process_excel_file(file_path, output_dir)

                    # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result_path = output_dir / (file_path.stem + ".json")
                    with open(result_path, "r", encoding="utf-8") as f:
                        result = json.load(f)
                    result_type = "Excel"

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –¢–∏–ø: {file_type}")
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                st.json(result)

                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON",
                    data=json.dumps(result, ensure_ascii=False, indent=2),
                    file_name=f"{uploaded_file.name}_result.json",
                    mime="application/json"
                )

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")


if __name__ == "__main__":
    main()