import gradio as gr
import pandas as pd
import json
from pathlib import Path
from io import BytesIO
import tempfile


def parse_excel_file(uploaded_file):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            tmp.write(uploaded_file)
            tmp_path = tmp.name

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é pandas
        xls = pd.ExcelFile(tmp_path)
        results = {
            "source_file": uploaded_file.name,
            "sheets": []
        }

        for sheet_name in xls.sheet_names:
            df = pd.read_excel(
                xls,
                sheet_name=sheet_name,
                header=None,
                dtype=str,
                na_filter=False
            )
            sheet_data = df.fillna("").values.tolist()

            results["sheets"].append({
                "sheet_name": sheet_name,
                "data": sheet_data
            })

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã–π JSON
        json_output = json.dumps(results, ensure_ascii=False, indent=4)

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        Path(tmp_path).unlink()

        return json_output, results

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", None


def display_sheet_data(data, sheet_index=0):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ –≤ DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not data or not data["sheets"]:
        return pd.DataFrame()

    sheet = data["sheets"][sheet_index]
    df = pd.DataFrame(sheet["data"])
    return df


# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio
with gr.Blocks(title="Excel Parser Demo") as demo:
    gr.Markdown("## üìä –ü–∞—Ä—Å–µ—Ä Excel-—Ñ–∞–π–ª–æ–≤")
    gr.Markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")

    with gr.Row():
        file_input = gr.File(label="–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", type="binary")

    with gr.Row():
        parse_btn = gr.Button("–ü–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª", variant="primary")

    with gr.Row():
        with gr.Column():
            json_output = gr.JSON(label="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON")
        with gr.Column():
            sheet_selector = gr.Dropdown(label="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç")
            data_table = gr.DataFrame(label="–î–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞", wrap=True)


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    def handle_file_upload(file):
        if file is None:
            return None, None, None, pd.DataFrame()

        json_data, full_data = parse_excel_file(file)
        sheet_names = [s["sheet_name"] for s in full_data["sheets"]] if full_data else []

        return (
            json_data,
            gr.Dropdown(choices=sheet_names, value=sheet_names[0] if sheet_names else None),
            full_data,
            display_sheet_data(full_data, 0) if full_data else pd.DataFrame()
        )


    def handle_sheet_select(full_data, sheet_name):
        if not full_data or not sheet_name:
            return pd.DataFrame()

        sheet_index = next((i for i, s in enumerate(full_data["sheets"]) if s["sheet_name"] == sheet_name), 0)
        return display_sheet_data(full_data, sheet_index)


    file_input.upload(
        fn=handle_file_upload,
        inputs=file_input,
        outputs=[json_output, sheet_selector, sheet_selector, data_table]
    )

    parse_btn.click(
        fn=handle_file_upload,
        inputs=file_input,
        outputs=[json_output, sheet_selector, sheet_selector, data_table]
    )

    sheet_selector.change(
        fn=handle_sheet_select,
        inputs=[sheet_selector, sheet_selector],
        outputs=data_table
    )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    demo.launch()